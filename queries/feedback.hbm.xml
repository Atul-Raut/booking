<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping>
  <sql-query name="app.feedback.question.get">
    <![CDATA[
        SELECT
          "ID" AS "questionId",
          "QUESTION" AS "question",
          "OPTION_A" AS "optionA",
          "OPTION_B" AS "optionB",
          "OPTION_C" AS "optionC",
          "OPTION_D" AS "optionD",
          "TYPE" AS "type"
        FROM
          "M_FEEDBACK_QUESTIONS"
        WHERE
          "DEL_FLG" = 0
          AND "TYPE" = :type
        ORDER BY "DISP_ORD"
    ]]>
  </sql-query>
  <sql-query name="app.feedback.save">
    <![CDATA[
      INSERT INTO "T_FEEDBACK" (
        "ID",
        "FEEDBACK_BY",
        "FEEDBACK_FOR",
        "RATINGS",
        "OTHER",
        "INS_DT",
        "INS_BY"
      )
      VALUES(
        :id,
        :userId,
        :feedbackFor,
        :allRatings,
        :details,
        CURRENT_TIMESTAMP,
        :serviceCode
      )
    ]]>
  </sql-query>
  <sql-query name="app.feedback.ans.save">
    <![CDATA[
      INSERT INTO "T_FEEDBACK_QUE_ANS" (
        "ID",
        "FEEDBACK_BY",
        "FEEDBACK_FOR",
        "QUESTION_ID",
        "RATINGS",
        "FEEDBACK_ID",
        "INS_DT",
        "INS_BY"
      )
      VALUES(
        :id,
        :userId,
        :feedbackFor,
        :questionId,
        :ratings,
        :feedbackID,
        CURRENT_TIMESTAMP,
        :serviceCode
      )
    ]]>
  </sql-query>
  <sql-query name="app.feedback.get">
    <![CDATA[
        SELECT
            feedback."ID" AS "feedbackID",
            feedback."FEEDBACK_BY" AS "feedbackBy",
            feedback."FEEDBACK_FOR" AS "feedbackFor",
            feedback."OTHER" AS "other",
            ROUND(feedratings."ratings", 1) AS "ratings",
            user1."feedbackBy" AS "feedbackByName"
          FROM
          "T_FEEDBACK" AS feedback
          JOIN(
            SELECT
              AVG("RATINGS") AS "ratings",
              "FEEDBACK_ID" AS "feedbackID",
              "FEEDBACK_BY" AS "feedbackBy",
              "FEEDBACK_FOR" AS "feedbackFor"
            FROM
              "T_FEEDBACK_QUE_ANS"
            GROUP BY
              "FEEDBACK_ID",
              "FEEDBACK_BY",
              "FEEDBACK_FOR"
          ) AS feedratings
          ON(
            feedratings."feedbackID" = feedback."ID"
            AND feedratings."feedbackBy" = feedback."FEEDBACK_BY"
            AND feedratings."feedbackFor" = feedback."FEEDBACK_FOR"
          )
          JOIN(
            SELECT
              DISTINCT
                "USER_ID",
                "FIRST_NAME" || ' ' || "LAST_NAME" AS "feedbackBy"
            FROM
              "M_USER"
          ) user1
          ON(
            user1."USER_ID" = feedback."FEEDBACK_BY"
          )
          WHERE
            feedback."FEEDBACK_FOR" not in ('APP')
            AND feedback."DEL_FLG" = 0
            AND feedback."FEEDBACK_FOR" = :feedbackFor
    ]]>
  </sql-query>
</hibernate-mapping>
