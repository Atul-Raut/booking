<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping>
  <sql-query name="app.post.search.customer">
    <![CDATA[
      select
        "ID" AS "postId",
        "SERVICE_ID" AS "serviceId",
        "VEHICLE_ID" AS "vehicleId",
        "ACTIVITY_DATE_TIME_FROM" AS "activityFromDate",
        "ACTIVITY_DATE_TIME_TO" AS "activityToDate",
        "SOURCE" AS "source",
        "DESTINATION" AS "destination",
        "OTHER" AS "otherInfo",
        "STATUS" AS "status",
		    "POST_TITLE" AS "postTitle",
			"BID" AS bid,
			"BID_DATE_TIME_TO" AS bidEndDate,
        COALESCE(p2."requestCount",0) AS "requestCount",
		COALESCE(p3."amount",0) AS "amount"
      from "T_POST"
      LEFT JOIN (
    		  	SELECT
    		  		count(*) AS "requestCount",
    		  		"POST_ID" as "postId"
    			FROM "T_POST_REQUEST"
    			WHERE
    			"DEL_FLG" = 0
    			GROUP BY "POST_ID"
    	  ) p2
    	  ON(
    		  "ID" = p2."postId"
    	  )
		  LEFT JOIN(
			  SELECT "POST_ID" as "postId", "AMOUNT" as "amount" FROM "T_POST_BID"
			  WHERE
			 "DEL_FLG" = 0
			  GROUP BY "POST_ID","AMOUNT")
			  p3
			  ON (
			  "ID" = p3."postId"
			  )

      where
        "DEL_FLG" = 0
        AND "USER_ID" = :userId
        AND "SERVICE_ID" = COALESCE(CAST(:serviceId AS TEXT),"SERVICE_ID")
        AND "VEHICLE_ID" = COALESCE(CAST(:vehicleId AS TEXT),"VEHICLE_ID")
        AND ("SOURCE" ilike CONCAT('%',COALESCE(CAST(:source AS TEXT),"SOURCE"),'%')
            OR "DESTINATION" ilike CONCAT('%',COALESCE(CAST(:destination AS TEXT),"DESTINATION"),'%')
        )
    ]]>
  </sql-query>
  <sql-query name="app.post.search.provider">
    <![CDATA[
      select
        "ID" AS "postId",
        "SERVICE_ID" AS "serviceId",
        "VEHICLE_ID" AS "vehicleId",
        "ACTIVITY_DATE_TIME_FROM" AS "activityFromDate",
        "ACTIVITY_DATE_TIME_TO" AS "activityToDate",
        "SOURCE" AS "source",
        "DESTINATION" AS "destination",
        "OTHER" AS "otherInfo",
        "STATUS" AS "status",
        "POST_TITLE" AS "postTitle",
        COALESCE(p2."requestCount",0) AS "requestCount"
      from "T_POST"
      LEFT JOIN (
            SELECT
              count(*) AS "requestCount",
              "POST_ID" as "postId"
          FROM "T_POST_REQUEST"
          WHERE
          "DEL_FLG" = 0
		  AND "REQUEST_USER_ID" = :requestUserId
          GROUP BY "POST_ID"
        ) p2
        ON(
          "ID" = p2."postId"
        )
      where
        "DEL_FLG" = 0
        AND "STATUS" in ('NEW')
        AND "SERVICE_ID" = COALESCE(CAST(:serviceId AS TEXT),"SERVICE_ID")
        AND "VEHICLE_ID" = COALESCE(CAST(:vehicleId AS TEXT),"VEHICLE_ID")
        AND ("SOURCE" ilike CONCAT('%',COALESCE(CAST(:source AS TEXT),"SOURCE"),'%')
            OR "DESTINATION" ilike CONCAT('%',COALESCE(CAST(:destination AS TEXT),"DESTINATION"),'%')
        )
    ]]>
  </sql-query>
  <sql-query name="app.post.create">
    <![CDATA[
    INSERT INTO "T_POST"(
        "ID",
        "USER_ID",
        "SERVICE_ID",
        "VEHICLE_ID",
        "SOURCE",
        "DESTINATION",
        "OTHER",
        "POST_TITLE",
        "STATUS",
        "DEL_FLG",
        "INS_DT",
        "INS_BY",
        "ACTIVITY_DATE_TIME_FROM",
        "ACTIVITY_DATE_TIME_TO",
        "BID_DATE_TIME_FROM",
        "BID_DATE_TIME_TO",
        "BID"
      )
      VALUES (
        :id,
        :userId,
        :serviceId,
        concat(',', :vehicleId, ','),
        :source,
        :destination,
        :otherInfo,
        :postTitle,
        :status,
        0,
        CURRENT_TIMESTAMP,
        :serviceCode,
        {SQL_PART}
        :bid
      )
    ]]>
  </sql-query>
  <sql-query name="app.post.update">
    <![CDATA[
      UPDATE "T_POST"
      SET "SERVICE_ID" = :serviceId,
        "VEHICLE_ID" = :vehicleId,
        "ACTIVITY_DATE_TIME_FROM" = :activityFromDate,
        "ACTIVITY_DATE_TIME_TO" = :activityToDate,
        "SOURCE" = :source,
        "DESTINATION" = :destination,
        "OTHER" = :otherInfo,
        "UPD_DT" = CURRENT_TIMESTAMP,
        "UPD_BY" = :serviceCode
      WHERE
        "ID" = :postId
        AND "USER_ID" = :userId
    ]]>
  </sql-query>
  <sql-query name="app.post.update.status">
    <![CDATA[
      UPDATE "T_POST"
      SET "STATUS" = :status,
        "UPD_DT" = CURRENT_TIMESTAMP,
        "UPD_BY" = :serviceCode
      WHERE
        "ID" = :postId
        AND "USER_ID" = :userId
    ]]>
  </sql-query>
  <sql-query name="app.post.delete">
    <![CDATA[
      UPDATE "T_POST"
      SET "DEL_FLG" = 1,
          "STATUS" = 'DELETED',
          "UPD_DT" = CURRENT_TIMESTAMP,
          "UPD_BY" = :serviceCode
      WHERE
        "ID" = :postId
        AND "USER_ID" = :userId
    ]]>
  </sql-query>
  <sql-query name="app.post.create.request">
    <![CDATA[
      INSERT INTO "T_POST_REQUEST"(
      	"ID",
      	"POST_ID",
      	"REQUEST_USER_ID",
        "STATUS",
      	"DEL_FLG",
      	"INS_DT",
      	"INS_BY"
      )
      VALUES (
      	:id,
      	:postId,
      	:userId,
        :status,
      	0,
      	CURRENT_TIMESTAMP,
      	:serviceCode
      )
    ]]>
  </sql-query>
  <sql-query name="app.post.delete.request">
    <![CDATA[
      UPDATE "T_POST_REQUEST"
      SET "DEL_FLG" = 1,
          "STATUS" = 'DELETED',
          "UPD_DT" = CURRENT_TIMESTAMP,
          "UPD_BY" = :serviceCode
      WHERE
        "POST_ID" = :postId
        AND "REQUEST_USER_ID" = :userId
    ]]>
  </sql-query>
  <sql-query name="app.post.get.request.count">
    <![CDATA[
      SELECT COUNT(*) AS "requestCount"
      FROM
        "T_POST_REQUEST"
      WHERE
        "POST_ID" = :postId
        AND "DEL_FLG" = 0
    ]]>
  </sql-query>
  <sql-query name="app.post.get.request">
    <![CDATA[
        SELECT
            postReq."POST_ID" AS "postId",
            postReq."STATUS" AS "status",
            postReq."INS_DT" AS "requestTime",
            postReq."ID" AS "requestID",
            postReq."REQUEST_USER_ID" AS "requestUserId",
            mUser."FIRST_NAME" || ' ' || "LAST_NAME" AS "requestUserName",
            3 AS "review",
            'Pune' AS "location",
            '3' AS "experience",
            mUser."MOBILE" AS "phone",
            mUser."EMAIL" AS "email",
            null AS "images",
            bid."AMOUNT" AS "bidAmount"
          FROM
            "T_POST_REQUEST" AS postReq
          JOIN "M_USER" AS mUser
            ON (
              mUser."USER_ID" = postReq."REQUEST_USER_ID"
            )
        LEFT OUTER JOIN (
          SELECT t1.*
          FROM "T_POST_BID" AS t1
          WHERE t1."INS_DT" = (SELECT MAX(t2."INS_DT")
                     FROM "T_POST_BID" t2
                     WHERE t2."REQUEST_USER_ID" = t1."REQUEST_USER_ID"
              AND "DEL_FLG" = 0
              AND "POST_ID" = CASE WHEN :postId in ('<NA>') THEN "POST_ID" ELSE :postId END
           )
        ) AS bid
        ON(
          mUser."USER_ID" = postReq."REQUEST_USER_ID"
          AND mUser."USER_ID" = bid."REQUEST_USER_ID"
          AND postReq."POST_ID" = bid."POST_ID"
        )
          WHERE
            postReq."POST_ID" = CASE WHEN :postId in ('<NA>') THEN postReq."POST_ID" ELSE :postId END
            AND postReq."DEL_FLG" = 0
            AND mUser."DEL_FLG" = 0
            AND mUser."AC_TYP" = 2
          ORDER BY
            bid."AMOUNT"
    ]]>
  </sql-query>
</hibernate-mapping>
